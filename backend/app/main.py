"""
VoicePC Backend - FastAPIÂ∫îÁî®ÂÖ•Âè£
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import uvicorn

from app.config import settings
from app.utils.logger import logger
from app.api import voice, chat, task, system
from app.database.sqlite_db import init_database

# ÂØºÂÖ•Â∑•ÂÖ∑‰ª•Ê≥®ÂÜå
from app.tools import app_control, file_operation, browser_control
from app.tools import text_processing, media_control, scene_manager
from app.tools.base_tool import tool_registry

# ÂØºÂÖ•AgentÊúçÂä°‰ª•ÂàùÂßãÂåñ
from app.services.ai.agent_service import agent_service


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Â∫îÁî®ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ"""
    # ÂêØÂä®Êó∂ÊâßË°å
    logger.info("=" * 60)
    logger.info("üöÄ VoicePC Backend starting...")
    logger.info(f"üìù Environment: {settings.APP_ENV}")
    logger.info("=" * 60)
    
    # ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
    await init_database()
    logger.info("‚úÖ Database initialized")
    
    # ÊòæÁ§∫Â∑≤Ê≥®ÂÜåÁöÑÂ∑•ÂÖ∑
    tools = tool_registry.get_all_tools()
    logger.info(f"üîß Registered {len(tools)} tools:")
    for tool_name in tools.keys():
        logger.info(f"   ‚úì {tool_name}")
    
    # ÊòæÁ§∫AgentÁä∂ÊÄÅ
    if agent_service.agent_executor:
        logger.info("ü§ñ AI Agent: READY (LangChain)")
    else:
        logger.info("ü§ñ AI Agent: SIMPLE MODE (ÈúÄÈÖçÁΩÆAPI Key)")
    
    logger.info("=" * 60)
    logger.info("‚úÖ VoicePC Backend is ready!")
    logger.info(f"üìç API Docs: http://{settings.APP_HOST}:{settings.APP_PORT}/docs")
    logger.info("=" * 60)
    
    yield
    
    # ÂÖ≥Èó≠Êó∂ÊâßË°å
    logger.info("üëã VoicePC Backend shutting down...")


# ÂàõÂª∫FastAPIÂ∫îÁî®
app = FastAPI(
    title="VoicePC API",
    description="AIËØ≠Èü≥ÁîµËÑëÂä©ÊâãÂêéÁ´ØÊúçÂä°",
    version="1.0.0",
    lifespan=lifespan
)

# ÈÖçÁΩÆCORSÔºàÂºÄÂèëÁéØÂ¢ÉÂÆåÂÖ®ÊîæÂºÄÔºåÁ°Æ‰øùÊú¨Âú∞Ë∞ÉËØïÊó†ÈòªÔºâ
if settings.APP_ENV == "development":
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # ÂºÄÂèëÁéØÂ¢ÉÂÖÅËÆ∏ÊâÄÊúâÊù•Ê∫ê
        allow_credentials=False,  # allow_origins=["*"]Êó∂ÂøÖÈ°ªÂÖ≥Èó≠credentials
        allow_methods=["*"],
        allow_headers=["*"],
    )
else:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.ALLOWED_ORIGINS,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# Ê≥®ÂÜåË∑ØÁî±
app.include_router(voice.router, prefix="/api/voice", tags=["ËØ≠Èü≥"])
app.include_router(chat.router, prefix="/api/chat", tags=["ÂØπËØù"])
app.include_router(task.router, prefix="/api/task", tags=["‰ªªÂä°"])
app.include_router(system.router, prefix="/api/system", tags=["Á≥ªÁªü"])


@app.get("/health")
async def health_check():
    """ÂÅ•Â∫∑Ê£ÄÊü•"""
    return {
        "status": "ok",
        "service": "VoicePC Backend",
        "version": "1.0.0",
        "tools_count": len(tool_registry.get_all_tools()),
        "agent_mode": "langchain" if agent_service.agent_executor else "simple"
    }


@app.get("/")
async def root():
    """Ê†πË∑ØÂæÑ"""
    return {
        "message": "VoicePC API Server",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health",
        "tools": "/api/task/tools"
    }


def start_server() -> None:
    """Programmatic server start for scripts."""
    logger.info(f"üåê Starting server on {settings.APP_HOST}:{settings.APP_PORT}")
    uvicorn.run(
        "app.main:app",
        host=settings.APP_HOST,
        port=settings.APP_PORT,
        reload=settings.APP_ENV == "development",
        log_level=settings.LOG_LEVEL.lower()
    )


if __name__ == "__main__":
    start_server()
